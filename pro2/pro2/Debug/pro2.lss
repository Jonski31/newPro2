
AVRASM ver. 2.2.6  G:\comp2121\newPro2-master\pro2\pro2\main.asm Thu Jun 01 22:20:18 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m2560def.inc'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m2560def.inc'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(30): Including file 'G:\comp2121\newPro2-master\pro2\pro2\macros.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(84): Including file 'G:\comp2121\newPro2-master\pro2\pro2\keypad.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(85): Including file 'G:\comp2121\newPro2-master\pro2\pro2\inventory.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(86): Including file 'G:\comp2121\newPro2-master\pro2\pro2\pot.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(568): Including file 'G:\comp2121\newPro2-master\pro2\pro2\lcd.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m2560def.inc'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m2560def.inc'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(30): Including file 'G:\comp2121\newPro2-master\pro2\pro2\macros.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(84): Including file 'G:\comp2121\newPro2-master\pro2\pro2\keypad.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(85): Including file 'G:\comp2121\newPro2-master\pro2\pro2\inventory.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(86): Including file 'G:\comp2121\newPro2-master\pro2\pro2\pot.asm'
G:\comp2121\newPro2-master\pro2\pro2\main.asm(568): Including file 'G:\comp2121\newPro2-master\pro2\pro2\lcd.asm'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; pro2.asm
                                 ;
                                 ; Created: 30/05/2017 10:16:41 PM
                                 ; Author : asafp
                                 ;
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 .def temp = r16
                                 .def temp1 = r17
                                 .def temp2 = r18
                                 
                                 //KEYPAD REGISTERS
                                 .def row = r19 ; current row number
                                 .def col = r20 ; current column number
                                 .def rmask = r21 ; mask for current row during scan
                                 .def cmask = r22 ; mask for current column during scan
                                 
                                 
                                 //KEYPAD CONSTANTS
                                 .equ PORTLDIR = 0xF0 ; PD7-4: output, PD3-0, input
                                 .equ INITCOLMASK = 0xEF ; scan from the rightmost column,
                                 .equ INITROWMASK = 0x01 ; scan from the top row
                                 .equ ROWMASK = 0x0F ; for obtaining input from Port D
                                 
                                 .equ secondline = 0b10101000
                                 
                                 .include "macros.asm"
                                 
                                 .macro do_lcd_command
                                 	ldi r16, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_reg
                                 	mov r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro clear
                                 	ldi YL, low(@0) ; load the memory address to Y
                                 	ldi YH, high(@0)
                                 	clr temp
                                 	st Y+, temp ; clear the two bytes at @0 in SRAM
                                 	st Y, temp
                                 .endmacro
                                 
                                 .macro resetLCD
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	rcall sleep_5ms
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	rcall sleep_1ms
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	do_lcd_command 0b00001000 ; display off?
                                 	do_lcd_command 0b00000001 ; clear display
                                 	do_lcd_command 0b00000110 ; increment, no display shift
                                 	do_lcd_command 0b00001100 ; Cursor on, bar, no blink
                                 .endmacro
                                 ///////////////////////////////////////////////////////////
                                 
                                 // STACK MACROS //////////////////////
                                 .macro pushStack
                                 	push temp
                                 	push temp1
                                 	push temp2
                                 	in temp, SREG
                                 	push temp ; Prologue starts.
                                 	push YH ; Save all conflict registers in the prologue.
                                 	push YL
                                 	push r25
                                 	push r24 ; Prologue ends.
                                 .endmacro
                                 
                                 
                                 .macro popStack
                                 	pop r24 ; Epilogue starts;
                                 	pop r25 ; Restore all conflict registers from the stack.
                                 	pop YL
                                 	pop YH
                                 	pop temp
                                 	out SREG, temp
                                 	pop temp2
                                 	pop temp1
                                 	pop temp
                                 .endmacro
                                 ///////////////////////////////////////////////////////////////////////////////////
                                 
                                 ///////////		INVENTORY MACROS //////////////////////////////////
                                 .macro setInventory  
                                 	;arranges items in 2 byte blocks, 1st byte = stock, 2nd byte = cost
                                 	ldi YL, low(inventory)
                                 	ldi YH, high(inventory)
                                 	ldi temp, 1 ;1
                                 	st Y+, temp
                                 	ldi temp, 1 
                                 	st Y+, temp
                                 	ldi temp, 0 ;2	;  set to 0 for debug, change back to 2 when done
                                 	st Y+, temp
                                 	ldi temp, 2 
                                 	st Y+, temp
                                 	ldi temp, 3 ;3
                                 	st Y+, temp
                                 	ldi temp, 1 
                                 	st Y+, temp
                                 	ldi temp, 4 ;4
                                 	st Y+, temp
                                 	ldi temp, 2 
                                 	st Y+, temp
                                 	ldi temp, 0 ;5
                                 	st Y+, temp
                                 	ldi temp, 1 
                                 	st Y+, temp
                                 	ldi temp, 6 ;6
                                 	st Y+, temp
                                 	ldi temp, 2 
                                 	st Y+, temp
                                 	ldi temp, 7 ;7
                                 	st Y+, temp
                                 	ldi temp, 1 
                                 	st Y+, temp
                                 	ldi temp, 8 ;8
                                 	st Y+, temp
                                 	ldi temp, 2 
                                 	st Y+, temp
                                 	ldi temp, 9 ;9
                                 	st Y+, temp
                                 	ldi temp, 1 
                                 	st Y+, temp
                                 	ldi YL, low(inventory)
                                 	ldi YH, high(inventory)
                                 .endmacro
                                 
                                 // Compares menu to given input
                                 .macro checkIfMenu 
                                 	lds temp, menu
                                 	cpi temp, @0
                                 .endMacro
                                 
                                 // Set menu to given input
                                 .macro setMenu
                                 	push temp
                                 	ldi temp, @0
                                 	sts menu, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro getInventory
                                 // push all registers onto the stack //
                                 
                                 ldi YH, high(inventory)
                                 ldi YL, low(inventory)
                                  
                                  mov temp, @0
                                  dec temp
                                  lsl temp // temp = 2(temp1 - 1)
                                  clr temp2
                                 
                                 
                                  // increment loop to 2(temp1-1) desired item number //
                                 increment:
                                 
                                 	// stores the current item's stock //
                                 	ld temp1, Y+
                                 	sts currentStock, temp1
                                 	// stores the current item's cost //
                                 	ld temp1, Y
                                 	sts currentCost, temp1
                                 
                                 	cp temp, temp2
                                 	breq return
                                 
                                 	inc temp2
                                 	rjmp increment
                                 return:
                                 .endMacro
                                 
                                 .macro isStockEmpty 
                                 	getInventory @0
                                 	lds temp2, currentStock
                                 	cpi temp2, 0
                                 .endMacro
                                 ////////////////////////////////////////
                                 
                                 /////	COIN SCREEN MACROS //////////
                                 .macro incrementCoins
                                 	lds temp, coins
                                 	inc temp
                                 	sts coins, temp
                                 	clr temp
                                 .endMacro
                                 
                                 .macro decrementCoins
                                 	lds temp, coins
                                 	dec temp
                                 	sts coins, temp
                                 	clr temp
                                 .endMacro
                                 
                                 
                                 
                                 ////////////////////////////////////
                                 
                                 ///// ADC MACROS /////////////////
                                 .macro setInitialLeft
                                 	push temp
                                 	ldi temp, @0
                                 	sts initialLeft, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro setTurnedRight
                                 	push temp
                                 	ldi temp, @0
                                 	sts turnedRight, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro setFinalLeft
                                 	push temp
                                 	ldi temp, @0
                                 	sts finalLeft, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro setInserted
                                 	push temp
                                 	ldi temp, @0
                                 	sts inserted, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro checkIfInitialLeft
                                 	lds temp, initialLeft
                                 	cpi temp, @0
                                 .endMacro
                                 
                                 .macro checkIfFinalLeft
                                 	lds temp, finalLeft
                                 	cpi temp, @0
                                 .endMacro
                                 
                                 .macro checkIfTurnedRight
                                 	lds temp, turnedRight
                                 	cpi temp, @0
                                 .endMacro
                                 
                                 .macro checkIfInserted
                                 	lds temp, inserted
                                 	cpi temp, @0
                                 .endMacro
                                 ///////////////////////////////
                                 //MOTOR
                                 
                                 .macro startMotor
                                 	push temp
                                 	ldi temp, 0b00010000
                                 	out PORTE, temp
                                 	pop temp
                                 .endMacro
                                 
                                 .macro stopMotor
                                 	push temp
                                 	ldi temp, 0b00000000
                                 	out PORTE, temp
                                 	pop temp
                                 
                                 
                                 .dseg
000200                           	menu: .byte 1 ; menu screen 1-7
000201                           	coins: .byte 1 ;keeps track of number of coins entered so far
                                 // TIMERS //
                                 TimeCounter:
000202                           	.byte 2 ; Two-byte counter for counting seconds.
                                 TempCounter:; Counts quater seconds 
000204                           	.byte 2 ; Temporary counter. Used to determine
                                 timer1:		; for start screen
000206                           	.byte 1
                                 timer3:		; for Out of stock screen
000207                           	.byte 1
                                 timer6:     ; Used for entering admin mode
000208                           	.byte 1
                                 
                                 // KEYPAD
                                 numPressed:		; current number pressed
000209                           	.byte 1
                                 prevNum:		; previous number pressed
00020a                           	.byte 1
                                 
                                 //INSERT COIN
00020b                           initialLeft: .byte 1
00020c                           turnedRight: .byte 1
                                 ;finalLeft: .byte 1
00020d                           inserted: .byte 1
00020e                           coinsForReturn : .byte 1
00020f                           coinReturnTime: .byte 1
                                 currentStock:
000210                           	.byte 1
                                 currentCost:
000211                           	.byte 1
                                 pattern:
000212                           	.byte 1 //pattern for leds atm flash only
                                 
                                 //INTERUPTS
                                 .cseg
                                 	.org 0
000000 940c 0124                 		jmp RESET
                                 	.org INT0addr
000002 940c 0452                 		jmp EXT_INT0
                                 	.org INT1addr
000004 940c 0471                 		jmp EXT_INT1   ;push button interrupt
                                 	.org OVF0addr
00002e 940c 03d9                 		jmp Timer0OVF ; Jump to the interrupt handler for
                                 						; Timer0 overflow.
                                 	.org 0x003A		  ;Address of ADC
00003a 940c 00c2                 		jmp EXT_POT
                                 
                                 
                                 
                                 .include "keypad.asm"
                                 
                                 
                                 colloop:
00003c 3044                      	cpi col, 4
00003d f0a9                      	breq returnBridge; If all keys are scanned, repeat.
00003e 9360 010b                 	sts PORTL, cmask ; Otherwise, scan a column.
000040 ef1f                      	ldi temp1, 0xFF ; Slow down the scan operation.
                                 delay: 
000041 951a                      	dec temp1
000042 f7f1                      	brne delay
000043 9110 0109                 	lds temp1, PINL ; Read PORTL
000045 701f                      	andi temp1, ROWMASK ; Get the keypad output value
000046 301f                      	cpi temp1, 0xF ; Check if any row is low
000047 f081                      	breq nextcol
                                 	; If yes, find which row is low
000048 e051                      	ldi rmask, INITROWMASK ; Initialize for row check
000049 2733                      	clr row ; 
                                 
                                 rowloop:
00004a 3034                      	cpi row, 4
00004b f061                      	breq nextcol ; the row scan is over.
00004c 2f21                      	mov temp2, temp1
00004d 2325                      	and temp2, rmask ; check un-masked bit
00004e f069                      	breq convert ; if bit is clear, the key is pressed
00004f 9533                      	inc row ; else move to the next row
000050 0f55                      	lsl rmask
000051 940c 004a                 	jmp rowloop
                                 
                                 returnBridge: // NO KEYS ARE SCANNED PREVIOUS NUMBER = 0!
000053 e000                      	ldi temp, 0
000054 9300 020a                 	sts prevNum, temp
000056 940c 00c1                 	jmp returnKeypad
                                 
                                 nextcol: ; if row scan is over
000058 0f66                      	lsl cmask
000059 9543                      	inc col ; increase column value
00005a 940c 003c                 	jmp colloop ; go to the next column
                                 
                                 convert:
00005c 9100 0200
00005e 3001                      	checkIfMenu 1
00005f f1e1                      	breq branchSelectScreen
                                 	;rcall SelectScreen	; try make to rcall
000060 3043                      	cpi col, 3 ; If the pressed key is in col.3
000061 f069                      	breq letters ; we have a letter
                                 	; If the key is not in col.3 and
000062 3033                      	cpi row, 3 ; If the key is in row3,
000063 f079                      	breq symbols ; we have a symbol or 0
000064 2f73                      	mov r23, row ; Otherwise we have a number in 1-9
000065 0f77                      	lsl r23
000066 0f73                      	add r23, row
000067 0f74                      	add r23, col ; r23 = row*3 + col
000068 5f7f                      	subi r23, -1 ; r23 = row*3 + col + '1'
                                 	
000069 9100 0200
00006b 3002                      	checkIfMenu 2 //check if on menu 2 if not jump to end
00006c f199                      	breq storeKeypad
00006d 940c 00c1                 	jmp returnKeypad
                                 
                                 letters:
00006f e471                      	ldi r23, 'A'
000070 0f73                      	add r23, row ; Get the ASCII value for the key
000071 940c 00c1                 	jmp returnKeypad
                                 symbols:
000073 3040                      	cpi col, 0 ; Check if we have a star
000074 f0b1                      	breq star
000075 3041                      	cpi col, 1 ; or if we have zero
000076 f111                      	breq zero
000077 e273                      	ldi r23, '#' ; if not we have hash
                                 
                                 
000078 9110 020e                 	lds temp1, coinsforReturn
00007a 0f11                      	lsl temp1
00007b 9310 020f                 	sts coinReturnTime, temp1  //store coins for return * 2 in coin return time
00007d e010                      	ldi temp1, 0
00007e 9310 020e                 	sts coinsforReturn, temp1 // clear coins for return
000080 d448                      	rcall sleep_25ms
                                 
000081 9100 0200
000083 3004                      	checkIfMenu 4			;if on insert coins screen move to select screen
000084 f0b9                      	breq branchSelectScreen
                                 
000085 9100 0200
000087 3006                      	checkIfMenu 6			;if in admin mode move to select screen :)
000088 f099                      	breq branchSelectScreen
                                 
000089 940c 00c1                 	jmp returnKeypad
                                 star:
00008b e27a                      	ldi r23, '*'		; Set to star
00008c 9100 0200
00008e 3002                      	checkIfMenu 2		; ADMIN MODE requires setScreen menu (2)
00008f f589                      	brne returnKeypad
                                 
000090 9100 020a                 	lds temp, prevNum	;at this point prevNum is previous value of the keypad
000092 320a                      	cpi temp, '*'		;now check previous value of numpressed was '*' so we dont reset the timer
000093 f061                      	breq storeKeypad	;store next '*' into numPressed
                                 
000094 e104                      	ldi temp, 20		;store 20 into timer5 to measure 5 secs for admin mode
000095 9300 0208                 	sts timer6, temp	
000097 940c 00a0                 	jmp storeKeypad		
                                 zero:
000099 e070                      	ldi r23, 0 ; Set to zero
00009a 940c 00c1                 	jmp returnKeypad
                                 
                                 branchSelectScreen:
00009c d16c                      	rcall selectScreen	
00009d c023                      	rjmp returnKeypad
                                 
                                 branchOOSScreen:
00009e d1c2                      	rcall outOfStockScreen
00009f c021                      	rjmp returnKeypad
                                 
                                 // Store keypad when we need output value otherwise return
                                 storeKeypad:
0000a0 9370 0209                 	sts numPressed, r23   //here we store r23 into numpressed just cause...
0000a2 327a                      	cpi r23, '*'			; if * is pressed return and store it in previous
0000a3 f0d9                      	breq storePrev
                                 
0000a4 9100 0200
0000a6 3002                      	checkIfMenu 2			//check again if menu = 2 
0000a7 f4c9                      	brne returnKeypad		//if it doesn't jump to end, if it does do macro
0000a8 e0d2
0000a9 e1c3
0000aa 2f07
0000ab 950a
0000ac 0f00
0000ad 2722
0000ae 9119
0000af 9310 0210
0000b1 8118
0000b2 9310 0211
0000b4 1702
0000b5 f011
0000b6 9523
0000b7 cff6
0000b8 9120 0210
0000ba 3020                      	isStockEmpty r23		//if true, branch to the out of stock screen
0000bb f311                      	breq branchOOSScreen
                                 	
0000bc d1f7                      	rcall coinScreen
0000bd 940c 00c1                 	jmp returnKeypad
                                 
                                 storePrev:
0000bf 9370 020a                 	sts prevNum, r23
                                 
                                 returnKeypad:	
0000c1 9508                      	ret
                                 	
                                 
                                 .include "inventory.asm"
                                 
                                 ;.def temp1 = r17	;n  = holds item num
                                 ;.def temp2 = r18	; counter = for incrementing
                                 
                                 .dseg
                                 inventory: 
000213                           	.byte 18
                                 .cseg 
                                 //setInventory
                                 
                                 //temp1 = position wanted
                                 
                                 
                                 
                                 
                                 .include "pot.asm"
                                 
                                 EXT_POT:
0000c2 930f
0000c3 931f
0000c4 932f
0000c5 b70f
0000c6 930f
0000c7 93df
0000c8 93cf
0000c9 939f
0000ca 938f                      	pushStack
0000cb 91e0 0078                 	lds ZL, ADCL
0000cd 91f0 0079                 	lds ZH, ADCH
                                 
0000cf ec00                      	ldi temp, (3 << REFS0) | (0 << ADLAR) | (0 << MUX0)
0000d0 9300 007c                 	sts ADMUX, temp
0000d2 e008                      	ldi temp, (1 << MUX5)
0000d3 9300 007b                 	sts ADCSRB, temp
0000d5 ec0d                      	ldi temp, (1 << ADEN) | (1 << ADSC) | (1 << ADIE) | (5 << ADPS0)
0000d6 9300 007a                 	sts ADCSRA, temp
                                 
0000d8 30e0                      	cpi ZL, low(0x000)		//potentiometer is turned left
0000d9 e010                      	ldi temp1, high(0x000)
0000da 07f1                      	cpc ZH, temp1
0000db f071                      	breq potLeft
                                 
0000dc 3fef                      	cpi ZL, low(0x3FF)		//potentiometer is turned right
0000dd e013                      	ldi temp1, high(0x3FF)
0000de 07f1                      	cpc ZH, temp1
0000df f0b9                      	breq potRight
                                 
                                 	returnPot:
0000e0 918f
0000e1 919f
0000e2 91cf
0000e3 91df
0000e4 910f
0000e5 bf0f
0000e6 912f
0000e7 911f
0000e8 910f                      		popStack
0000e9 9518                      		reti
                                 
                                 potLeft:
0000ea 9100 0200
0000ec 3004                      	checkIfMenu 4
0000ed f791                      	brne returnPot
                                 	
0000ee 9100 020c
0000f0 3000                      	checkIfTurnedRight 0
0000f1 f161                      	breq incInitialLeft
                                 
0000f2 9100 020d
0000f4 3001                      	checkifInserted 1
0000f5 f051                      	breq coinInserted
0000f6 cfe9                      	rjmp returnPot
                                 
                                 potRight:
0000f7 9100 0200
0000f9 3004                      	checkIfMenu 4
0000fa f729                      	brne returnPot
0000fb 9100 020b
0000fd 3001                      	checkIfInitialLeft 1
0000fe f0a1                      	breq incTurnedRight 
0000ff cfe0                      	rjmp returnPot
                                 
                                 coinInserted:
000100 9100 0201                 	lds temp, coins
000102 0f00                      	lsl temp
000103 9503                      	inc temp
000104 9300 0201                 	sts coins, temp
000106 b908                      	out PORTC, temp
000107 930f
000108 e000
000109 9300 020d
00010b 910f                      	setInserted 0
                                 
00010c 9110 020e                 	lds temp1, coinsforReturn //increment coins for return when pot is triggered
00010e 9513                      	inc temp1  
00010f 9310 020e                 	sts coinsForReturn, temp1
000111 d1a2                      	rcall coinScreen
000112 cfcd                      	rjmp returnPot
                                 
                                 incTurnedRight:
000113 930f
000114 e001
000115 9300 020c
000117 910f                      	setTurnedRight 1
000118 930f
000119 e001
00011a 9300 020d
00011c 910f                      	setInserted 1
00011d cfc2                      	rjmp returnPot
                                 	
                                 incInitialLeft:
00011e 930f
00011f e001
000120 9300 020b
000122 910f                      	setInitialLeft 1
000123 cfbc                      	rjmp returnPot
                                 
                                 
                                 RESET:
                                 	// INTIATE STACK
000124 ef0f                      	ldi r16, low(RAMEND)
000125 bf0d                      	out SPL, r16
000126 e201                      	ldi r16, high(RAMEND)
000127 bf0e                      	out SPH, r16
                                 
                                 	// LCD RESET
000128 ef0f                      	ser r16
000129 bb00                      	out DDRF, r16
00012a b907                      	out DDRC, r16
00012b b901                      	out DDRA, r16
00012c bb03                      	out DDRG, r16
00012d 2700                      	clr r16
00012e bb01                      	out PORTF, r16
00012f b902                      	out PORTA, r16
000130 b908                      	out PORTC, r16
000131 bb04                      	out PORTG, r16
                                 
                                 	// TIMER RESET//
000132 e0c4
000133 e0d2
000134 2700
000135 9309
000136 8308                      	clear TempCounter ; Initialize the temporary counter to 0
000137 e0c2
000138 e0d2
000139 2700
00013a 9309
00013b 8308                      	clear TimeCounter ; Initialize the second counter to 0
00013c e000                      	ldi temp, 0b00000000
00013d bd04                      	out TCCR0A, temp
00013e e002                      	ldi temp, 0b00000010
00013f bd05                      	out TCCR0B, temp ; Prescaling value=8
000140 e001                      	ldi temp, 1<<TOIE0 ; = 128 microseconds
000141 9300 006e                 	sts TIMSK0, temp ; T/C0 interrupt enable
                                 
                                 
                                 	// KEYPAD RESET
000143 ef10                      	ldi temp1, PORTLDIR ; PA7:4/PA3:0, out/in
000144 9310 010a                 	sts DDRL, temp1
                                 
                                 	// PUSH BUTTON INITIALISATION 
000146 e002                      	ldi temp, (2<<ISC00)	;set INT0 as falling edge triggered interupt
000147 9300 0069                 	sts EICRA, temp
000149 b30d                      	in temp, EIMSK			;enable INT0 & INT1
00014a 6001                      	ori temp, (1<<INT0)
00014b 6002                      	ori temp, (1<<INT1)
00014c bb0d                      	out EIMSK, temp
                                 
                                 	// ADC INIT
00014d ec00                      	ldi temp, (3 << REFS0) | (0 << ADLAR) | (0 << MUX0)
00014e 9300 007c                 	sts ADMUX, temp
000150 e008                      	ldi temp, (1 << MUX5)
000151 9300 007b                 	sts ADCSRB, temp
000153 ec0d                      	ldi temp, (1 << ADEN) | (1 << ADSC) | (1 << ADIE) | (5 << ADPS0)
000154 9300 007a                 	sts ADCSRA, temp
                                 
000156 ef0f                      	ser temp
000157 b90d                      	out DDRE, temp
000158 2700                      	clr temp
000159 b90e                      	out PORTE, temp
                                 
00015a 9478                      	sei ; Enable global interrupt
                                 
                                 	// INVENTORY INITIALISATION
00015b e1c3
00015c e0d2
00015d e001
00015e 9309
00015f e001
000160 9309
000161 e000
000162 9309
000163 e002
000164 9309
000165 e003
000166 9309
000167 e001
000168 9309
000169 e004
00016a 9309
00016b e002
00016c 9309
00016d e000
00016e 9309
00016f e001
000170 9309
000171 e006
000172 9309
000173 e002
000174 9309
000175 e007
000176 9309
000177 e001
000178 9309
000179 e008
00017a 9309
00017b e002
00017c 9309
00017d e009
00017e 9309
00017f e001
000180 9309
000181 e1c3
000182 e0d2                      	setInventory
                                 
                                 	// CONSTANTS
000183 e000                      	ldi temp, 0
000184 9300 0201                 	sts coins, temp
000186 9300 020e                 	sts coinsForReturn, temp
000188 9300 020f                 	sts coinReturnTime,temp
                                 
00018a d001                      	rcall startScreen
00018b c249                      	rjmp main			;go to main to start polling, reset finished
                                 
                                 startScreen: ;start screen is part of reset function
00018c 930f
00018d e001
00018e 9300 0200
000190 910f                      	setMenu 1
                                 	;out portc, temp
                                 
000191 e308
000192 d2fe
000193 d30d
000194 d326
000195 e308
000196 d2fa
000197 d309
000198 d319
000199 e308
00019a d2f6
00019b d305
00019c e308
00019d d2f3
00019e d302
00019f e008
0001a0 d2f0
0001a1 d2ff
0001a2 e001
0001a3 d2ed
0001a4 d2fc
0001a5 e006
0001a6 d2ea
0001a7 d2f9
0001a8 e00c
0001a9 d2e7
0001aa d2f6                      	resetLCD
                                 
0001ab e302
0001ac d2eb
0001ad d2f3                      	do_lcd_data '2'
0001ae e301
0001af d2e8
0001b0 d2f0                      	do_lcd_data '1'
0001b1 e302
0001b2 d2e5
0001b3 d2ed                      	do_lcd_data '2'
0001b4 e301
0001b5 d2e2
0001b6 d2ea                      	do_lcd_data '1'
0001b7 e200
0001b8 d2df
0001b9 d2e7                      	do_lcd_data ' '
0001ba e301
0001bb d2dc
0001bc d2e4                      	do_lcd_data '1'
0001bd e307
0001be d2d9
0001bf d2e1                      	do_lcd_data '7'
0001c0 e703
0001c1 d2d6
0001c2 d2de                      	do_lcd_data 's'
0001c3 e301
0001c4 d2d3
0001c5 d2db                      	do_lcd_data '1'
0001c6 e200
0001c7 d2d0
0001c8 d2d8                      	do_lcd_data ' '
0001c9 e200
0001ca d2cd
0001cb d2d5                      	do_lcd_data ' '
0001cc e200
0001cd d2ca
0001ce d2d2                      	do_lcd_data ' '
0001cf e401
0001d0 d2c7
0001d1 d2cf                      	do_lcd_data 'A'
0001d2 e304
0001d3 d2c4
0001d4 d2cc                      	do_lcd_data '4'
                                 
0001d5 ea08
0001d6 d2ba
0001d7 d2c9                      	do_lcd_command secondLine
                                 
0001d8 e506
0001d9 d2be
0001da d2c6                      	do_lcd_data 'V'
0001db e605
0001dc d2bb
0001dd d2c3                      	do_lcd_data 'e'
0001de e60e
0001df d2b8
0001e0 d2c0                      	do_lcd_data 'n'
0001e1 e604
0001e2 d2b5
0001e3 d2bd                      	do_lcd_data 'd'
0001e4 e609
0001e5 d2b2
0001e6 d2ba                      	do_lcd_data 'i'
0001e7 e60e
0001e8 d2af
0001e9 d2b7                      	do_lcd_data 'n'
0001ea e607
0001eb d2ac
0001ec d2b4                      	do_lcd_data 'g'
0001ed e200
0001ee d2a9
0001ef d2b1                      	do_lcd_data ' '
0001f0 e40d
0001f1 d2a6
0001f2 d2ae                      	do_lcd_data 'M'
0001f3 e601
0001f4 d2a3
0001f5 d2ab                      	do_lcd_data 'a'
0001f6 e603
0001f7 d2a0
0001f8 d2a8                      	do_lcd_data 'c'
0001f9 e608
0001fa d29d
0001fb d2a5                      	do_lcd_data 'h'
0001fc e609
0001fd d29a
0001fe d2a2                      	do_lcd_data 'i'
0001ff e60e
000200 d297
000201 d29f                      	do_lcd_data 'n'
000202 e605
000203 d294
000204 d29c                      	do_lcd_data 'e'
                                 	
                                 	
                                 
000205 e00c                      	ldi temp, 12	; for 3 seconds, intitilise to 13, because every 0.25s x 4 = 1 *3 = 12;
000206 9300 0206                 	sts timer1, temp
000208 9508                      	ret
                                 
                                 selectScreen:
                                 	
                                 	// if coming from insertCoin screen, we need to clear coins, clear leds, and keep the value of coins in coinsforreturn
000209 9100 0200
00020b 3004                      	checkIfMenu 4
00020c f499                      	brne test
                                 	//lds temp, coinsForReturn
                                 	//lsl temp
                                 	//sts coinsForReturn, temp
                                 	//inc temp
                                 	//out portc, temp
                                 	//sts coinsForReturn, temp
                                 
00020d e000                      	ldi temp, 0
00020e 9300 0201                 	sts coins, temp
000210 b908                      	out PORTC, temp
000211 930f
000212 e000
000213 9300 020d
000215 910f                      	setInserted 0
000216 930f
000217 e000
000218 9300 020b
00021a 910f                      	setInitialLeft 0
00021b 930f
00021c e000
00021d 9300 020c
00021f 910f                      	setTurnedRight 0
                                 
                                 	test:
000220 930f
000221 e002
000222 9300 0200
000224 910f                      	setMenu 2
                                 	;out portc, temp
                                 
000225 e308
000226 d26a
000227 d279
000228 d292
000229 e308
00022a d266
00022b d275
00022c d285
00022d e308
00022e d262
00022f d271
000230 e308
000231 d25f
000232 d26e
000233 e008
000234 d25c
000235 d26b
000236 e001
000237 d259
000238 d268
000239 e006
00023a d256
00023b d265
00023c e00c
00023d d253
00023e d262                      	resetLCD
                                 
00023f e503
000240 d257
000241 d25f                      	do_lcd_data 'S'
000242 e605
000243 d254
000244 d25c                      	do_lcd_data 'e'
000245 e60c
000246 d251
000247 d259                      	do_lcd_data 'l'
000248 e605
000249 d24e
00024a d256                      	do_lcd_data 'e'
00024b e603
00024c d24b
00024d d253                      	do_lcd_data 'c'
00024e e704
00024f d248
000250 d250                      	do_lcd_data 't'
000251 e200
000252 d245
000253 d24d                      	do_lcd_data ' '
000254 e609
000255 d242
000256 d24a                      	do_lcd_data 'i'
000257 e704
000258 d23f
000259 d247                      	do_lcd_data 't'
00025a e605
00025b d23c
00025c d244                      	do_lcd_data 'e'
00025d e60d
00025e d239
00025f d241                      	do_lcd_data 'm'
000260 9508                      	ret
                                 
                                 //menu 3
                                 outOfStockScreen:
000261 e308
000262 d22e
000263 d23d
000264 d256
000265 e308
000266 d22a
000267 d239
000268 d249
000269 e308
00026a d226
00026b d235
00026c e308
00026d d223
00026e d232
00026f e008
000270 d220
000271 d22f
000272 e001
000273 d21d
000274 d22c
000275 e006
000276 d21a
000277 d229
000278 e00c
000279 d217
00027a d226                      	resetLCD
                                 
00027b e40f
00027c d21b
00027d d223                      	do_lcd_data 'O'
00027e e705
00027f d218
000280 d220                      	do_lcd_data 'u'
000281 e704
000282 d215
000283 d21d                      	do_lcd_data 't'
000284 e200
000285 d212
000286 d21a                      	do_lcd_data ' '
000287 e60f
000288 d20f
000289 d217                      	do_lcd_data 'o'
00028a e606
00028b d20c
00028c d214                      	do_lcd_data 'f'
00028d e200
00028e d209
00028f d211                      	do_lcd_data ' '
000290 e703
000291 d206
000292 d20e                      	do_lcd_data 's'
000293 e704
000294 d203
000295 d20b                      	do_lcd_data 't'
000296 e60f
000297 d200
000298 d208                      	do_lcd_data 'o'
000299 e603
00029a d1fd
00029b d205                      	do_lcd_data 'c'
00029c e60b
00029d d1fa
00029e d202                      	do_lcd_data 'k'
                                 
00029f ea08
0002a0 d1f0
0002a1 d1ff                      	do_lcd_command secondLine
                                 
                                 	;out PORTC, temp1
0002a2 9110 0209                 	lds temp1, numPressed
0002a4 5d10                      	subi temp1, -'0'
0002a5 2f01
0002a6 d1f1
0002a7 d1f9                      	do_lcd_data_reg temp1		;temp1 holds what key was pressed, we convert it to ascii, print it out to lcd
                                 
                                 
                                 	;We will have a check to see when this equals 6 i.e. 1.5secs to toggle led's
0002a8 930f
0002a9 e003
0002aa 9300 0200
0002ac 910f                      	setMenu 3
0002ad e00c                      	ldi temp, 12	;for 3 seconds, intitilise to 12, because every 0.25s x 4 = 1 *3 = 12;
0002ae 9300 0207                 	sts timer3, temp
0002b0 e000                      	ldi temp, 0b00000000
0002b1 9300 0212                 	sts pattern, temp
0002b3 9508                      	ret
                                 
                                 coinScreen:
0002b4 930f
0002b5 e004
0002b6 9300 0200
0002b8 910f                      	setMenu 4
                                 
0002b9 e308
0002ba d1d6
0002bb d1e5
0002bc d1fe
0002bd e308
0002be d1d2
0002bf d1e1
0002c0 d1f1
0002c1 e308
0002c2 d1ce
0002c3 d1dd
0002c4 e308
0002c5 d1cb
0002c6 d1da
0002c7 e008
0002c8 d1c8
0002c9 d1d7
0002ca e001
0002cb d1c5
0002cc d1d4
0002cd e006
0002ce d1c2
0002cf d1d1
0002d0 e00c
0002d1 d1bf
0002d2 d1ce                      	resetLCD
                                 
0002d3 e409
0002d4 d1c3
0002d5 d1cb                      	do_lcd_data 'I'
0002d6 e60e
0002d7 d1c0
0002d8 d1c8                      	do_lcd_data 'n'
0002d9 e703
0002da d1bd
0002db d1c5                      	do_lcd_data 's'
0002dc e605
0002dd d1ba
0002de d1c2                      	do_lcd_data 'e'
0002df e702
0002e0 d1b7
0002e1 d1bf                      	do_lcd_data 'r'
0002e2 e704
0002e3 d1b4
0002e4 d1bc                      	do_lcd_data 't'
0002e5 e200
0002e6 d1b1
0002e7 d1b9                      	do_lcd_data ' '
0002e8 e603
0002e9 d1ae
0002ea d1b6                      	do_lcd_data 'c'
0002eb e60f
0002ec d1ab
0002ed d1b3                      	do_lcd_data 'o'
0002ee e609
0002ef d1a8
0002f0 d1b0                      	do_lcd_data 'i'
0002f1 e60e
0002f2 d1a5
0002f3 d1ad                      	do_lcd_data 'n'
0002f4 e703
0002f5 d1a2
0002f6 d1aa                      	do_lcd_data 's'
                                 
0002f7 ea08
0002f8 d198
0002f9 d1a7                      	do_lcd_command secondLine
                                 	
                                 	// PRINT TO LED NUMBER OF COINS BEEN ENTERED, LEAVE IN, NOT DEBUGGING!!!!!
0002fa 9100 0201                 	lds temp, coins
0002fc b908                      	out portc, temp
                                 	// SHOW NUMBER OF COINS REMAINING = CURRENTCOST - COINS ENTERED
0002fd 9110 0211                 	lds temp1, currentCost
0002ff 9100 020e                 	lds temp, coinsForReturn
000301 1b10                      	sub temp1, temp
000302 3011                      	cpi temp1, 1
000303 f02c                      	brlt DeliverScreen
000304 5d10                      	subi temp1, -'0'
000305 2f01
000306 d191
000307 d199                      	do_lcd_data_reg temp1
                                 	
000308 9508                      	ret
                                 
                                 DeliverScreen:
000309 930f
00030a e005
00030b 9300 0200
00030d 910f                      	setMenu 5
                                 
00030e e308
00030f d181
000310 d190
000311 d1a9
000312 e308
000313 d17d
000314 d18c
000315 d19c
000316 e308
000317 d179
000318 d188
000319 e308
00031a d176
00031b d185
00031c e008
00031d d173
00031e d182
00031f e001
000320 d170
000321 d17f
000322 e006
000323 d16d
000324 d17c
000325 e00c
000326 d16a
000327 d179                      	resetLCD
                                 
000328 e404
000329 d16e
00032a d176                      	do_lcd_data 'D'
00032b e605
00032c d16b
00032d d173                      	do_lcd_data 'e'
00032e e60c
00032f d168
000330 d170                      	do_lcd_data 'l'
000331 e609
000332 d165
000333 d16d                      	do_lcd_data 'i'
000334 e706
000335 d162
000336 d16a                      	do_lcd_data 'v'
000337 e605
000338 d15f
000339 d167                      	do_lcd_data 'e'
00033a e702
00033b d15c
00033c d164                      	do_lcd_data 'r'
00033d e609
00033e d159
00033f d161                      	do_lcd_data 'i'
000340 e60e
000341 d156
000342 d15e                      	do_lcd_data 'n'
000343 e607
000344 d153
000345 d15b                      	do_lcd_data 'g'
000346 e200
000347 d150
000348 d158                      	do_lcd_data ' '
000349 e609
00034a d14d
00034b d155                      	do_lcd_data 'i'
00034c e704
00034d d14a
00034e d152                      	do_lcd_data 't'
00034f e605
000350 d147
000351 d14f                      	do_lcd_data 'e'
000352 e60d
000353 d144
000354 d14c                      	do_lcd_data 'm'
                                 	
000355 e023                      	ldi temp2, 3    // counter
                                 	
000356 930f
000357 e100
000358 b90e
000359 910f                      	startMotor
                                 	timeLoop:
00035a ef1f                      	ser temp1		;flash leds
00035b b918                      	out PORTC, temp1
00035c bb14                      	out PORTG, temp1
                                 
00035d d163                      	rcall sleep_500ms
                                 
00035e 2711                      	clr temp1		;clear leds
00035f b918                      	out PORTC, temp1
000360 bb14                      	out PORTG, temp1
                                 
000361 d15f                      	rcall sleep_500ms
                                 
000362 952a                      	dec temp2
000363 3020                      	cpi temp2, 0
000364 f7a9                      	brne timeLoop
                                 
000365 930f
000366 e000
000367 b90e
000368 910f                      	stopMotor
000369 2700                      	clr temp
00036a 9300 0201                 	sts coins, temp
00036c 9300 020e                 	sts coinsForReturn, temp
00036e ce9a                      	rjmp SelectScreen
                                 	;ret
                                 
                                 	///ADMIN MODE
                                 enterAdminMode:
                                 
00036f e308
000370 d120
000371 d12f
000372 d148
000373 e308
000374 d11c
000375 d12b
000376 d13b
000377 e308
000378 d118
000379 d127
00037a e308
00037b d115
00037c d124
00037d e008
00037e d112
00037f d121
000380 e001
000381 d10f
000382 d11e
000383 e006
000384 d10c
000385 d11b
000386 e00c
000387 d109
000388 d118                      	resetLCD
                                 
000389 e401
00038a d10d
00038b d115                      	do_lcd_data 'A'
00038c e604
00038d d10a
00038e d112                      	do_lcd_data 'd'
00038f e60d
000390 d107
000391 d10f                      	do_lcd_data 'm'
000392 e609
000393 d104
000394 d10c                      	do_lcd_data 'i'
000395 e60e
000396 d101
000397 d109                      	do_lcd_data 'n'
000398 e200
000399 d0fe
00039a d106                      	do_lcd_data ' '
00039b e40d
00039c d0fb
00039d d103                      	do_lcd_data 'M'
00039e e60f
00039f d0f8
0003a0 d100                      	do_lcd_data 'o'
0003a1 e604
0003a2 d0f5
0003a3 d0fd                      	do_lcd_data 'd'
0003a4 e605
0003a5 d0f2
0003a6 d0fa                      	do_lcd_data 'e'
0003a7 e200
0003a8 d0ef
0003a9 d0f7                      	do_lcd_data ' '
0003aa e30f
0003ab d0ec
0003ac d0f4                      	do_lcd_data '?' ;this is currently selected item
                                 
0003ad ea08
0003ae d0e2
0003af d0f1                      	do_lcd_command secondLine
0003b0 e203
0003b1 d0e6
0003b2 d0ee                      	do_lcd_data '#'
                                 
0003b3 e200
0003b4 d0e3
0003b5 d0eb                      	do_lcd_data ' '
0003b6 e200
0003b7 d0e0
0003b8 d0e8                      	do_lcd_data ' '
0003b9 e200
0003ba d0dd
0003bb d0e5                      	do_lcd_data ' '
0003bc e200
0003bd d0da
0003be d0e2                      	do_lcd_data ' '
0003bf e200
0003c0 d0d7
0003c1 d0df                      	do_lcd_data ' '
0003c2 e200
0003c3 d0d4
0003c4 d0dc                      	do_lcd_data ' '
0003c5 e200
0003c6 d0d1
0003c7 d0d9                      	do_lcd_data ' '
0003c8 e200
0003c9 d0ce
0003ca d0d6                      	do_lcd_data ' '
                                 
0003cb e204                      	ldi temp, 36        ;ASCII value for $$$
0003cc 2f00
0003cd d0ca
0003ce d0d2                      	do_lcd_data_reg temp
0003cf 930f
0003d0 e006
0003d1 9300 0200
0003d3 910f                      	setMenu 6
                                 	
0003d4 9508                      	ret
                                 
                                 
                                 // MAIN LOOP TO START POLLING
                                 main:
                                 	;lds temp, menu
                                 	;out portc, temp
                                 	;do_lcd_command secondLine
                                 	;lds temp, numPressed
                                 	;do_lcd_data_reg temp
                                 
0003d5 ee6f                      	ldi cmask, INITCOLMASK	; initial column mask
0003d6 2744                      	clr col					; initial column
0003d7 dc64                      	rcall colloop			; continue poll
0003d8 cffc                      	rjmp main				; loop main to continue polling 
                                 
                                 
                                 ///////////////////////////////////////////////
                                 
                                 
                                 // TIMER 0 INTERUPT
                                 Timer0OVF: ; interrupt subroutine to Timer0
                                 	
0003d9 930f
0003da 931f
0003db 932f
0003dc b70f
0003dd 930f
0003de 93df
0003df 93cf
0003e0 939f
0003e1 938f                      	pushStack
                                 	; Load the value of the temporary counter.
0003e2 9180 0204                 	lds r24, TempCounter
0003e4 9190 0205                 	lds r25, TempCounter+1
0003e6 9601                      	adiw r25:r24, 1 ; Increase the temporary counter by one.
                                 
0003e7 3a81                      	cpi r24, low(1953) ; Check if (r25:r24) = 7812
0003e8 e007                      	ldi temp, high(1953) ; 7812 = 10^6/128
0003e9 0790                      	cpc r25, temp
0003ea f409                      	brne NotSecond //not 0.25 seconds
0003eb c005                      	rjmp returnflag
                                 	NotSecond:
                                 	; Store the new value of the temporary counter.
0003ec 9380 0204                 	sts TempCounter, r24
0003ee 9390 0205                 	sts TempCounter+1, r25
0003f0 c057                      	rjmp epilogue
                                 	// Execute every 0.25 sec
                                 	returnFlag:
0003f1 9120 020f                 		lds temp2, coinReturnTime // check if we need to return coins
0003f3 3020                      		cpi temp2, 0
0003f4 f091                      		breq timer1flag 
                                 		//out portc, temp2
0003f5 7021                      		andi temp2, 0b00000001
                                 		//out portc, temp2
0003f6 3020                      		cpi temp2,0 // and so we can check if number is odd or even
0003f7 f429                      		brne odd
0003f8 930f
0003f9 e100
0003fa b90e
0003fb 910f                      		startmotor
0003fc c004                      		rjmp reducecoins
                                 		odd: 
0003fd 930f
0003fe e000
0003ff b90e
000400 910f                      		stopmotor
                                 
                                 		reducecoins:
000401 9120 020f                 		lds temp2, coinReturnTime 
000403 952a                      		dec temp2                   //reduce coin number and store back
000404 9320 020f                 		sts coinReturnTime, temp2
000406 c03b                      		rjmp newQsecond
                                 
                                 	timer1flag:
000407 9100 0200
000409 3001                      		checkIfMenu 1
00040a f449                      		brne timer6flag
00040b 9100 0206                 		lds temp, timer1
00040d 3000                      		cpi temp, 0
00040e f409                      		brne skip
00040f c02c                      		rjmp callSelectScreen ;change later
                                 		skip:
000410 950a                      		dec temp
000411 9300 0206                 		sts timer1, temp
000413 c02e                      		rjmp newQsecond
                                 	timer6flag:
000414 9100 0200
000416 3002                      		checkIfMenu 2		;admin mode can only be entered in menu 2
000417 f461                      		brne timer3flag		;ELSE move on
                                 
000418 9100 020a                 		lds temp, prevNum   ;only enter loop if '*' is pressed
00041a 320a                      		cpi temp, '*'
00041b f441                      		brne timer3flag
                                 
00041c 9100 0208                 		lds temp, timer6       ;load timer 6 = 20 = 5secs
                                 
00041e 3000                      		cpi temp, 0			   ;when timer runs down to 0, decrement
00041f f0f9                      		breq callAdminMode 
                                 		;out portc, temp ; DEBUG DISPLAY TIMER6, (IT WORKS)
000420 950a                      		dec temp
000421 9300 0208                 		sts timer6, temp
000423 c01e                      		rjmp newQsecond
                                 
                                 	timer3flag:
000424 9100 0200
000426 3003                      		checkIfMenu 3 ;check if in out of stock screen
000427 f501                      		brne epilogue
000428 9100 0207                 		lds temp, timer3
                                 		;out portc, temp
00042a 3000                      		cpi temp, 0
00042b f081                      		breq callSelectScreen ;change later
                                 	
                                 		//FLASH LEDS
00042c 2f20                      		mov temp2, temp //load time into temp
00042d 7021                      		andi temp2, 0b00000001 //and to get either a 1 or 0 in the last bit
00042e 3020                      		cpi temp2, 0 //0 = even, 1 = odd
00042f f441                      		brne continue //If odd skip
000430 ef1f                      		ser temp1
000431 9120 0212                 		lds temp2, pattern
000433 2721                      		eor temp2, temp1 //Invert pattern
000434 9320 0212                 		sts pattern, temp2
000436 b928                      		out portc, temp2
000437 bb24                      		out portg, temp2
                                 
                                 		continue:
000438 950a                      		dec temp
                                 		;out portc, temp
000439 9300 0207                 		sts timer3, temp
00043b c006                      		rjmp newQsecond
                                 	
                                 	callSelectScreen:
00043c e00f                      		ldi temp, 0b00001111
                                 		;out portc, temp
00043d ddcb                      		rcall selectScreen
00043e c009                      		rjmp epilogue
                                 
                                 	callAdminMode:
00043f e505                      		ldi temp, 0b01010101
                                 		;out portc, temp
000440 df2e                      		rcall enterAdminMode
000441 c006                      		rjmp epilogue
                                 
                                 newQsecond: ;starts new quarter 
000442 e0c4
000443 e0d2
000444 2700
000445 9309
000446 8308                      	clear TempCounter ; Reset the temporary counter.
000447 c000                      	rjmp epilogue
                                 
                                 epilogue:
000448 918f
000449 919f
00044a 91cf
00044b 91df
00044c 910f
00044d bf0f
00044e 912f
00044f 911f
000450 910f                      	popStack
000451 9518                      	reti ; Return from the interrupt.
                                 
                                 // PUSH BUTTON INTERUPTS :)
                                 EXT_INT0: ;Right Button
000452 930f
000453 931f
000454 932f
000455 b70f
000456 930f
000457 93df
000458 93cf
000459 939f
00045a 938f                      	pushStack
00045b 9100 0200
00045d 3003                      	checkIfMenu 3  ;if menu = 3, go back to select screen 
00045e f441                      	brne END_INT0
00045f 2700                      	clr temp
000460 b908                      	out PORTC, temp
000461 bb04                      	out PORTG, temp
                                 	/*cpi debounceFlag0, 1 ;if still debouncing, ignore interupt
                                 	breq END_INT0 
                                 
                                 	ldi debounceFlag0, 1 ;set debounce flag*/
                                 
000462 9100 0200
000464 3003                      	checkIfMenu 3  ;if menu = 3, go back to select screen 
000465 f409                      	brne END_INT0
000466 dda2                      	rcall selectScreen
                                 	
                                 END_INT0:
000467 918f
000468 919f
000469 91cf
00046a 91df
00046b 910f
00046c bf0f
00046d 912f
00046e 911f
00046f 910f                      	popStack
000470 9518                      	reti
                                 
                                 EXT_INT1: ;Left Button
000471 930f
000472 931f
000473 932f
000474 b70f
000475 930f
000476 93df
000477 93cf
000478 939f
000479 938f                      	pushStack
00047a 9100 0200
00047c 3003                      	checkIfMenu 3  ;if menu = 3, go back to select screen 
00047d f441                      	brne END_INT1
00047e 2700                      	clr temp
00047f b908                      	out PORTC, temp
000480 bb04                      	out PORTG, temp
                                 	/*cpi debounceFlag0, 1 ;if still debouncing, ignore interupt
                                 	breq END_INT0 
                                 
                                 	ldi debounceFlag0, 1 ;set debounce flag*/
                                 	
000481 9100 0200
000483 3003                      	checkIfMenu 3  ;if menu = 3, go back to select screen 
000484 f409                      	brne END_INT1
000485 dd83                      	rcall selectScreen
                                 		
                                 END_INT1:
000486 918f
000487 919f
000488 91cf
000489 91df
00048a 910f
00048b bf0f
00048c 912f
00048d 911f
00048e 910f                      	popStack
00048f 9518                      	reti
                                 
                                 
                                 halt:
000490 cfff                      	rjmp halt
                                 
                                 	
                                 .include "lcd.asm"
                                 
                                 
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 ;
                                 ; Send a command to the LCD (r16)
                                 ;
                                 
                                 lcd_command:
000491 bb01                      	out PORTF, r16
000492 d01f                      	rcall sleep_1ms
000493 9a16                      	lcd_set LCD_E
000494 d01d                      	rcall sleep_1ms
000495 9816                      	lcd_clr LCD_E
000496 d01b                      	rcall sleep_1ms
000497 9508                      	ret
                                 
                                 lcd_data:
000498 bb01                      	out PORTF, r16
000499 9a17                      	lcd_set LCD_RS
00049a d017                      	rcall sleep_1ms
00049b 9a16                      	lcd_set LCD_E
00049c d015                      	rcall sleep_1ms
00049d 9816                      	lcd_clr LCD_E
00049e d013                      	rcall sleep_1ms
00049f 9817                      	lcd_clr LCD_RS
0004a0 9508                      	ret
                                 
                                 lcd_wait:
0004a1 930f                      	push r16
0004a2 2700                      	clr r16
0004a3 bb00                      	out DDRF, r16
0004a4 bb01                      	out PORTF, r16
0004a5 9a15                      	lcd_set LCD_RW
                                 lcd_wait_loop:
0004a6 d00b                      	rcall sleep_1ms
0004a7 9a16                      	lcd_set LCD_E
0004a8 d009                      	rcall sleep_1ms
0004a9 b10f                      	in r16, PINF
0004aa 9816                      	lcd_clr LCD_E
0004ab fd07                      	sbrc r16, 7
0004ac cff9                      	rjmp lcd_wait_loop
0004ad 9815                      	lcd_clr LCD_RW
0004ae ef0f                      	ser r16
0004af bb00                      	out DDRF, r16
0004b0 910f                      	pop r16
0004b1 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
0004b2 938f                      	push r24
0004b3 939f                      	push r25
0004b4 e09f                      	ldi r25, high(DELAY_1MS)
0004b5 e98c                      	ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0004b6 9701                      	sbiw r25:r24, 1
0004b7 f7f1                      	brne delayloop_1ms
0004b8 919f                      	pop r25
0004b9 918f                      	pop r24
0004ba 9508                      	ret
                                 
                                 sleep_5ms:
0004bb dff6                      	rcall sleep_1ms
0004bc dff5                      	rcall sleep_1ms
0004bd dff4                      	rcall sleep_1ms
0004be dff3                      	rcall sleep_1ms
0004bf dff2                      	rcall sleep_1ms
0004c0 9508                      	ret
                                 
                                 sleep_500ms:
0004c1 930f                      	push temp
0004c2 e604                      	ldi temp, 100
                                 
                                 	loop:
0004c3 dff7                      	rcall sleep_5ms
0004c4 950a                      	dec temp
0004c5 3000                      	cpi temp, 0
0004c6 f7e1                      	brne loop
                                 
0004c7 910f                      	pop temp
0004c8 9508                      	ret
                                 
                                 sleep_25ms:
0004c9 dff1                      	rcall sleep_5ms
0004ca dff0                      	rcall sleep_5ms
0004cb dfef                      	rcall sleep_5ms
0004cc dfee                      	rcall sleep_5ms
0004cd dfed                      	rcall sleep_5ms
0004ce dfec                      	rcall sleep_5ms
0004cf dfeb                      	rcall sleep_5ms
0004d0 dfea                      	rcall sleep_5ms
0004d1 dfe9                      	rcall sleep_5ms
0004d2 dfe8                      	rcall sleep_5ms
0004d3 dfe7                      	rcall sleep_5ms
0004d4 dfe6                      	rcall sleep_5ms
0004d5 dfe5                      	rcall sleep_5ms
0004d6 dfe4                      	rcall sleep_5ms
0004d7 dfe3                      	rcall sleep_5ms
0004d8 dfe2                      	rcall sleep_5ms
0004d9 dfe1                      	rcall sleep_5ms
0004da dfe0                      	rcall sleep_5ms
0004db dfdf                      	rcall sleep_5ms
0004dc dfde                      	rcall sleep_5ms
0004dd 9508                      


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  26 z  :   0 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 450 r17:  48 r18:  33 r19:   7 r20:   7 
r21:   3 r22:   3 r23:  14 r24:  16 r25:  16 r26:   0 r27:   0 r28:  14 
r29:  14 r30:   3 r31:   3 
Registers used: 15 out of 35 (42.9%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   1 and   :   1 
andi  :   3 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  24 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   1 brmi  :   0 
brne  :  21 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  13 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   3 
cpi   :  42 cpse  :   0 dec   :   8 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   5 jmp   :  14 ld    :   2 ldd   :   0 ldi   : 237 
lds   :  40 lpm   :   0 lsl   :   6 lsr   :   0 mov   :   7 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   2 out   :  41 pop   :  53 push  :  53 rcall : 369 ret   :  13 
reti  :   4 rjmp  :  24 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   5 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  24 std   :   0 sts   :  49 sub   :   1 subi  :   3 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 39 out of 116 (33.6%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009bc   2392      0   2392  262144   0.9%
[.dseg] 0x000200 0x000225      0     37     37    8192   0.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
